// Gradle script to build and run the SkyExamples subproject of SkyControl

// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

plugins {
    id 'application' // to build JVM applications
}

dependencies {
    implementation(libs.commons.exec)

    implementation(libs.acorus)
    implementation(libs.heart)
    implementation(libs.jcommander)
    implementation(libs.jme3.utilities.nifty)

    runtimeOnly(libs.nifty.style.black)
    runtimeOnly(libs.jme3.awt.dialogs)
    runtimeOnly(libs.jme3.desktop)
    implementation(libs.jme3.lwjgl3)
    implementation(libs.jme3.terrain)
    runtimeOnly(libs.jme3.testdata)

    // SkyExamples doesn't use jme3-jogg nor jme3-plugins
    //  -- they are included solely to avoid runtime warnings from AssetConfig:
    runtimeOnly(libs.jme3.jogg)
    runtimeOnly(libs.jme3.plugins)

    //implementation 'com.github.stephengold:SkyControl:' + skycontrolVersion // for published library
    implementation project(':SkyLibrary') // for local library build
}

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
Boolean isMacOS = DefaultNativePlatform.currentOperatingSystem.isMacOsX()

tasks.withType(JavaExec).configureEach { // Java runtime options:
    if (isMacOS) {
        jvmArgs '-XstartOnFirstThread'
    }
    //args '--verbose' // to enable additional log output
    dependsOn 'installDist'
}

startScripts.dependsOn(':SkyLibrary:assemble')

// Register cleanup tasks:

clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSandbox', 'cleanSOs')

tasks.register('cleanDLLs', Delete) { // extracted Windows native libraries
    delete fileTree(dir: '.', include: '*.dll')
}
tasks.register('cleanDyLibs', Delete) { // extracted macOS native libraries
    delete fileTree(dir: '.', include: '*.dylib')
}
tasks.register('cleanLogs', Delete) { // JVM crash logs
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
tasks.register('cleanSandbox', Delete) { // Acorus sandbox
    delete 'Written Assets'
}
tasks.register('cleanSOs', Delete) { // extracted Linux and Android native libraries
    delete fileTree(dir: '.', include: '*.so')
}

// Register tasks to run the example apps:

tasks.register('AppChooser', JavaExec) {
    mainClass = 'jme3utilities.sky.test.AppChooser'
}

tasks.register('CubeMapExample', JavaExec) {
    mainClass = 'jme3utilities.sky.test.CubeMapExample'
}
tasks.register('CubeMapExampleAfter', JavaExec) {
    mainClass = 'jme3utilities.sky.test.CubeMapExampleAfter'
}
tasks.register('TestGlobeRenderer', JavaExec) {
    mainClass = 'jme3utilities.sky.test.TestGlobeRenderer'
}
tasks.register('WaterExample', JavaExec) {
    mainClass = 'jme3utilities.sky.test.WaterExample'
}

tasks.register('debugTestSkyControl', JavaExec) {
    debug true
    mainClass = 'jme3utilities.sky.test.TestSkyControl'
}
tasks.register('TestSkyControl', JavaExec) {
    mainClass = 'jme3utilities.sky.test.TestSkyControl'
}
tasks.register('TestSkyControlCyclone', JavaExec) {
    args '-c'
    mainClass = 'jme3utilities.sky.test.TestSkyControl'
}
tasks.register('TestSkyControlShadowFilter', JavaExec) {
    args '-f'
    mainClass = 'jme3utilities.sky.test.TestSkyControl'
}
tasks.register('TestSkyControlNoCubes', JavaExec) {
    args '-n'
    mainClass = 'jme3utilities.sky.test.TestSkyControl'
}
tasks.register('TestSkyControlSingleDome', JavaExec) {
    args '-s'
    mainClass = 'jme3utilities.sky.test.TestSkyControl'
}
tasks.register('TestSkyControlUsage', JavaExec) {
    args '-u'
    mainClass = 'jme3utilities.sky.test.TestSkyControl'
}
tasks.register('TestSkyControlWater', JavaExec) {
    args '-w'
    mainClass = 'jme3utilities.sky.test.TestSkyControl'
}

tasks.register('TestSkyMaterial', JavaExec) {
    mainClass = 'jme3utilities.sky.test.TestSkyMaterial'
}
